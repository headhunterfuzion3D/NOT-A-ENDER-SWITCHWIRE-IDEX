# DUAL-CARRIAGES
########################################


[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : False
variable_custom_park_x    : 0.0   ; custom x position for parking
variable_custom_park_y    : 0.0   ; custom y position for parking
variable_cancel_retract   : 3.0   ; retract distance during cancel
variable_speed_retract    : 35.0  ; retract speed in mm/s
variable_unretract        : 3.0   ; unretract distance during resume
variable_speed_unretract  : 35.0  ; unretract speed in mm/s
variable_speed_move       : 100.0 ; general move speed in mm/s
variable_idle_timeout     : 10   ; idle timeout in seconds
variable_park_at_cancel   : True  ; allow parking on cancel
variable_park_at_cancel_x : 0.0   ; custom X for parking during cancel
variable_park_at_cancel_y : 0.0   ; custom Y for parking during cancel
gcode:
    # This macro doesn't do anything by itself but holds variables for use in other macros.


[gcode_macro MOVE_TO_CENTER_AND_LIFT]
gcode:
    G91 ; Relative positioning
    G1 Z4 F1000     ; Lift Z by 1mm
    G90 ; Absolute positioning
    # Ensure that the movement is within limits
    {% if 0 <= printer.toolhead.position.x <= 250 %}
        G1 X114 F8000 ; Move to X center
    {% else %}
        M117 Move out of bounds, stopping!
    {% endif %}

[gcode_macro SWIFT_PARK_T0]
gcode:
      
        ACTIVATE_COPY_MODE
        G90 ; Absolute positioning
        G1 X-33 F 5000 ; Move to park position tool_0

[gcode_macro SWIFT_PARK_T1]
gcode:
      
        ACTIVATE_COPY_MODE
        G90 ; Absolute positioning
        G1 X115 F5000 ; Move to park position tool_1


[gcode_macro T0]
gcode:
    {% if printer.toolhead.extruder == "extruder" %}
        M117 T0 is already active ; Display message on printer screen
    {% else %}
        MOVE_TO_CENTER_AND_LIFT
        SWIFT_PARK_T1
        ACTIVATE_EXTRUDER EXTRUDER=extruder
        SET_DUAL_CARRIAGE CARRIAGE=0
        SET_GCODE_OFFSET Y=0.0  ; Negative moves offset to the back 
        SET_GCODE_OFFSET X=0.0  ; Negative moves to the left 
        SET_GCODE_OFFSET Z=0.0
    {% endif %}


[gcode_macro T1]
gcode:
    {% if printer.toolhead.extruder == "extruder1" %}
        M117 T1 is already active ; Display message on printer screen
    {% else %}
        MOVE_TO_CENTER_AND_LIFT
        SWIFT_PARK_T0
        ACTIVATE_EXTRUDER EXTRUDER=extruder1
        SET_DUAL_CARRIAGE CARRIAGE=1
        SET_GCODE_OFFSET Y=-0.85  ; Negative moves offset to the back 
        SET_GCODE_OFFSET X=-9.25; Negative moves to the left 
        SET_GCODE_OFFSET Z=0.22
    {% endif %}



[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
variable_restore_idle_timeout: 0
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set idle_timeout = client.idle_timeout|default(0) %}
  {% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
  {% set restore = False if printer.toolhead.extruder == '' else True if params.RESTORE|default(1)|int == 1 else False %}
  ##### end of definitions #####
  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"

  # Set a new idle_timeout value
  {% if idle_timeout > 0 %}
    SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
    SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
  {% endif %}

  # Pause the print
  PAUSE_BASE

  ##### Tool parking logic #####
  {% if printer.toolhead.extruder == "extruder" %}
    # If T0 (extruder 0) is active, park it safely at X0 Y0
    G91  ; relative positioning
    G1 Z10 F3000 ; raise Z by 10mm to avoid collision
    G90  ; absolute positioning
    G1 X0 Y0 F9000  ; park T0 at X0 Y0
  {% elif printer.toolhead.extruder == "extruder1" %}
    # If T1 (extruder 1) is active, park it safely at X262 Y0
    G91  ; relative positioning
    G1 Z10 F3000 ; raise Z by 10mm to avoid collision
    G90  ; absolute positioning
    G1 X261 Y0 F9000  ; park T1 at X262 Y0
  {% endif %}

  ##### Additional toolhead park for cancelling print #####
  _TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}
   G92 E0.0                  # Reset extruder position again


[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print with temperature-based retraction
rename_existing: CANCEL_PRINT_BASE
gcode:
  ##### Get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
  {% set retract = client.cancel_retract|default(5.0)|abs %}
  {% set speed_retract = client.speed_retract|default(35.0)|abs %}
  {% set extruder_temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
  {% set current_temp = printer[printer.toolhead.extruder].temperature if printer.toolhead.extruder != '' else 0 %}
  
  ##### Define park position #####
  G28 X

  ##### Restore idle timeout to 0 #####
  SET_IDLE_TIMEOUT TIMEOUT=1

  ##### Check if hotend is hot enough for retraction #####
  {% if current_temp >= extruder_temp %}
      M117 Performing retraction... ; Display message confirming retraction
      _CLIENT_RETRACT LENGTH={retract} SPEED={speed_retract}
  {% else %}
      M117 Hotend too cool for retraction! ; Display message to notify
  {% endif %}

  ##### Turn off heaters and fans #####
  TURN_OFF_HEATERS
  M106 S0

  ##### Call the original CANCEL_PRINT_BASE command #####
  CANCEL_PRINT_BASE


[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
variable_last_extruder_temp: {'restore': False, 'temp': 0}
gcode:
  ##### Get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
  {% set sp_move = client.speed_move|default(velocity) %}
  {% set unretract = client.unretract|default(3.0)|abs %}
  {% set speed_unretract = client.speed_unretract|default(35.0)|abs %}
  ##### End of definitions #####

  ##### Restore idle_timeout if needed #####
  {% if printer['gcode_macro PAUSE'].restore_idle_timeout > 0 %}
    SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro PAUSE'].restore_idle_timeout}
  {% endif %}

  ##### Check if printer was idle and restore temperature if needed #####
  {% if printer.idle_timeout.state|upper == "IDLE" %}
    {% if last_extruder_temp.restore %} 
      M109 S{last_extruder_temp.temp}  ; Wait for the extruder to heat up to the previous temperature
    {% endif %}
  {% endif %}

  ##### Unretract the filament #####
  _CLIENT_RETRACT LENGTH=-{unretract} SPEED={speed_unretract}  ; unretract filament

  ##### Tool-specific resume logic #####
  {% if printer.toolhead.extruder == "extruder" %}
    # Resume for T0 (extruder 0)
    G91  ; relative positioning
    G1 Z-10 F3000  ; lower Z by 10mm (restore Z height)
    G90  ; absolute positioning
    RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
  {% elif printer.toolhead.extruder == "extruder1" %}
    # Resume for T1 (extruder 1)
    G91  ; relative positioning
    G1 Z-10 F3000  ; lower Z by 10mm (restore Z height)
    G90  ; absolute positioning
    RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
  {% endif %}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
gcode:
  {% if printer.toolhead.extruder == "extruder" %}
    G91  ; relative positioning
    G1 Z10 F3000  ; raise Z by 10mm to avoid collision
    G90  ; absolute positioning
    G1 X0 Y0 F9000  ; park T0 at X0 Y0
  {% elif printer.toolhead.extruder == "extruder1" %}
    G91  ; relative positioning
    G1 Z10 F3000  ; raise Z by 10mm to avoid collision
    G90  ; absolute positioning
    G1 X262 Y0 F9000  ; park T1 at X262 Y0
  {% endif %}

[gcode_macro _CLIENT_RETRACT]
gcode:
  {% set length = params.LENGTH|default(3.0)|float %}
  {% set speed = params.SPEED|default(35.0)|float %}
  G1 E{length} F{speed*60}  ; retract or unretract filament

[gcode_macro M600]
description: Change filament for IDEX printer
gcode:
  # Save the current toolhead position and temperature
  {% set current_extruder = printer.toolhead.extruder %}
  {% set current_temp = printer[current_extruder].target %}

  # Raise the Z-axis to avoid collision
  G91  ; Set to relative positioning
  G1 Z10 F3000  ; Raise Z by 10mm
  G90  ; Set to absolute positioning

  # Park the active toolhead
  {% if current_extruder == "extruder" %}
    G1 X0 Y0 F9000  ; Park T0 at X0 Y0
  {% elif current_extruder == "extruder1" %}
    G1 X262 Y0 F9000  ; Park T1 at X262 Y0
  {% endif %}

  # Retract filament
  G1 E-5 F500  ; Retract 5mm of filament
  # Optionally, wait for the user to change the filament
  M400  ; Wait for moves to finish

  # Prompt the user to change filament
  M117 Cambiar filamento...  ; Display message on the printer screen
  PAUSE  ; Optionally pause the print for user input

  # Wait until the user resumes the print (if using a button to resume)
  M400  ; Wait for moves to finish

  # Unretract filament
  G1 E5 F500  ; Unretract 5mm of filament

  # Restore the temperature of the extruder
  M109 S{current_temp}  ; Wait for the extruder to reach the target temperature

  # Resume printing from the current position
  RESUME

[gcode_macro PRINT_START]
description: Start print macro with purging for both extruders
gcode:
    M117 Homing...                 ; display message
    G28                            ; Home all axes

    # Set bed and extruder temps for leveling and printing
    M140 S60                       ; Set bed leveling temp
    M104 S215                      ; Set extruder leveling temp
    M109 S215                      ; Wait for extruder to reach temp
    M190 S60                       ; Wait for bed to reach leveling temp
    SET_HEATER_TEMPERATURE HEATER=extruder1 TARGET=215
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=215

    # Bed mesh calibration
    BED_MESH_CALIBRATE
    BED_MESH_PROFILE LOAD="default"

    # Set final printing temps
    M140 S{params.BED_TEMP|default(printer.heater_bed.target, true)}    ; Set bed temp
    M104 S{params.EXTRUDER_TEMP|default(printer.extruder.target, true)} ; Set extruder temp
    M109 S{params.EXTRUDER_TEMP|default(printer.extruder.target, true)} ; Wait for extruder temp
    M190 S{params.BED_TEMP|default(printer.heater_bed.target, true)}    ; Wait for bed temp

    M117 Preparing for print...     ; Display message

    #G28                            ; Home all axes again after heating and mesh
    MOVE_TO_CENTER_AND_LIFT

    # Purge sequence for T0 and T1
    G92 E0.0                  # Reset extruder position again
    T0                    ; Activate and purge T0 (left extruder)
    ADAPTIVE_PURGE                 ; Call your adaptive purge macro for T0

    T1                    ; Activate and purge T1 (right extruder)
    ADAPTIVE_PURGE                 ; Call your adaptive purge macro for T1

[gcode_macro PRINT_END]
description: Macro to end the print for IDEX printer with fixed parking positions
gcode:
  # Retract settings
  {% set retract_distance = 5.0 %}
  {% set retract_speed = 35.0 %}

  # Lift the head to avoid collisions
  G91  ; Relative positioning
  G1 Z10 F3000  ; Lift the Z-axis by 10mm
  G90  ; Absolute positioning

  # Retract filament from both extruders
  G1 E-{retract_distance} F{retract_speed * 60}  ; Retract filament

  G28 X

  # Turn off heaters
  M104 S0  ; Turn off extruder heater
  M140 S0  ; Turn off bed heater

  # Turn off the part cooling fan
  M106 S0  ; Turn off the fan

  # Move the bed to the front for easier object removal
  G1 Y200 F3000  ; Ensure Y position is within limits

  # Disable motors
  M84  ; Turn off stepper motors

  # Display print finished message
  M117 Print finished


# Enable object exclusion
[exclude_object]


# A helper script to activate copy mode
[gcode_macro ACTIVATE_COPY_MODE]
gcode:
    SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
    #G1 X0
    #ACTIVATE_EXTRUDER EXTRUDER=extruder
    #SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
    #G1 X100
    SET_DUAL_CARRIAGE CARRIAGE=1 MODE=COPY
    #SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder

# A helper script to activate mirror mode
[gcode_macro ACTIVATE_MIRROR_MODE]
gcode:
    SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
    G1 X0
    ACTIVATE_EXTRUDER EXTRUDER=extruder
    SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
    G1 X200
    SET_DUAL_CARRIAGE CARRIAGE=1 MODE=MIRROR
    SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder

[gcode_macro ADAPTIVE_PURGE]
description: A purge macro that adapts to be near your actual printed objects for both extruders

variable_adaptive_enable: True      # Change to False if you'd like the purge to be in the same spot every print
variable_z_height: 0.4              # Height above the bed to purge
variable_tip_distance: 10           # Distance between filament tip and nozzle before purge
variable_purge_amount: 40           # Amount of filament to purge
variable_flow_rate: 10              # Desired flow rate in mm3/s
variable_x_default: 10              # X location to purge, overwritten if adaptive is True
variable_y_default: 10              # Y location to purge, overwritten if adaptive is True
variable_size: 10                   # Size of the logo
variable_distance_to_object_x: 10   # Distance in x to the print area
variable_distance_to_object_y: 10   # Distance in y to the print area
variable_x_offset_t1: 50            # X offset for T1 purge position

gcode:
    {% if adaptive_enable %}
        {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
        {% set x_origin = (all_points | map(attribute=0) | min | default(x_default + distance_to_object_x + size)) - distance_to_object_x - size %}
        {% set y_origin = (all_points | map(attribute=1) | min | default(y_default + distance_to_object_y + size)) - distance_to_object_y - size %}
        {% set x_origin = ([x_origin, 0] | max) %}
        {% set y_origin = ([y_origin, 0] | max) %}
    {% else %}
        {% set x_origin = x_default | float %}
        {% set y_origin = y_default | float %}
    {% endif %}

    # Adjust purge location based on the active extruder
    {% if printer.toolhead.extruder == "extruder1" %}
        {% set x_origin = x_origin + x_offset_t1 %}
    {% endif %}

    {% set purge_move_speed = 2.31 * size * flow_rate / (purge_amount * 2.405) %}
    {% set prepurge_speed = flow_rate / 2.405 %}
    {% set travel_speed = printer.toolhead.max_velocity %}
    { action_respond_info("x: " + x_origin|string + " y: " + y_origin|string + " purge_move_speed: " + purge_move_speed|string + " prepurge_speed: " + prepurge_speed|string) }

    G92 E0
    G0 F{travel_speed*60}                                                               # Set travel speed
    G90                                                                                 # Absolute positioning
    G0 X{x_origin} Y{y_origin + size/2}                                               # Move to purge position
    G0 Z{z_height}                                                                      # Move to purge Z height
    M83                                                                                 # Relative extrusion mode
    G1 E{tip_distance} F{prepurge_speed*60}                                           # Move tip of filament to nozzle
    G1 X{x_origin + size*0.289} Y{y_origin + size} E{purge_amount/4} F{purge_move_speed*60} # Purge first line of logo
    G1 E-0.5 F2100                                                                      # Retract
    G0 Z{z_height*2}                                                                    # Z hop
    G0 X{x_origin + size*0.789} Y{y_origin + size}                                    # Move to second purge line origin
    G0 Z{z_height}                                                                      # Move to purge Z height
    G1 E0.5 F2100                                                                        # Recover
    G1 X{x_origin + size*0.211} Y{y_origin} E{purge_amount/2} F{purge_move_speed*60}  # Purge second line of logo
    G1 E-0.5 F2100                                                                      # Retract
    G0 Z{z_height*2}                                                                    # Z hop
    G0 X{x_origin + size*0.711} Y{y_origin}                                           # Move to third purge line origin
    G0 Z{z_height}                                                                      # Move to purge Z height
    G1 E0.5 F2100                                                                        # Recover
    G1 X{x_origin + size} Y{y_origin + size/2} E{purge_amount/4} F{purge_move_speed*60}  # Purge third line of logo
    G1 E-0.5 F2100                                                                      # Retract
    G92 E0                                                                              # Reset extruder distance
    M82                                                                                 # Absolute extrusion mode
    G0 Z{z_height*2}                                                                    # Z hop




[gcode_macro M486]
gcode:
  # Parameters known to M486 are as follows:
  #   [C<flag>] Cancel the current object
  #   [P<index>] Cancel the object with the given index
  #   [S<index>] Set the index of the current object.
  #       If the object with the given index has been canceled, this will cause
  #       the firmware to skip to the next object. The value -1 is used to
  #       indicate something that isn’t an object and shouldn’t be skipped.
  #   [T<count>] Reset the state and set the number of objects
  #   [U<index>] Un-cancel the object with the given index. This command will be
  #       ignored if the object has already been skipped

  {% if 'exclude_object' not in printer %}
    {action_raise_error("[exclude_object] is not enabled")}
  {% endif %}

  {% if 'T' in params %}
    EXCLUDE_OBJECT RESET=1

    {% for i in range(params.T | int) %}
      EXCLUDE_OBJECT_DEFINE NAME={i}
    {% endfor %}
  {% endif %}

  {% if 'C' in params %}
    EXCLUDE_OBJECT CURRENT=1
  {% endif %}

  {% if 'P' in params %}
    EXCLUDE_OBJECT NAME={params.P}
  {% endif %}

  {% if 'S' in params %}
    {% if params.S == '-1' %}
      {% if printer.exclude_object.current_object %}
        EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
      {% endif %}
    {% else %}
      EXCLUDE_OBJECT_START NAME={params.S}
    {% endif %}
  {% endif %}

  {% if 'U' in params %}
    EXCLUDE_OBJECT RESET=1 NAME={params.U}
  {% endif %}






